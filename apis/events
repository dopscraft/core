--[[
Event Handler
Wraps os.pullEvent() but allows us to register
callbacks that occur for particular event types.

Usage:

function myHandler(a, b, c)
  blah blah
end

-- Multiple functions can handle the same event.
-- Multiple events can be handled by the same
-- function.
events.register("some_event_type", myHandler)
while true do
  -- This returns the same as os.pullEvent
  -- But prior to returning will call all the
  -- event callbacks.
  evt, a, b, c, d, e = event.pull()
end

events.unregister("some_event_type", myHandler)
--]]

local callbacks = {}

function register(event, func)
  for k,v in pairs(callbacks) do
    if v[1] == event and v[2] == func then
      return
    end
  end
  table.insert(callbacks, { event, func })
end

function unregister(event, func)
  local removes = {}
  for k,v in pairs(callbacks) do
    if v[1] == event and v[2] == func then
      removes[k] = k
    end
  end
  for k,v in pairs(removes) do
    callbacks[k] = nil
  end
end

function pull(filter)
  while true do
    evt, p1, p2, p3, p4, p5 = os.pullEvent()
    for k,v in pairs(callbacks) do
      if evt == v[1] then
        v[2](p1, p2, p3, p4, p5)
      end
    end
    if filter == nil or evt == filter then
      return evt, p1, p2, p3, p4, p5
    end
  end
end

