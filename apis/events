--[[
Event Handler
 
A class to enable events.
Each program instance only needs one of these.
 
Usage:
-- Create the instance.
local eh = events.create()
 
-- Create a callback.
function myHandler(a, b, c)
  blah blah
end
 
-- Register the callback.
eh:register("some_event_type", myHandler)
 
while true do
  -- We can still handle events here the way we
  -- would with os.pullEvent, but in addition all
  -- callbacks we've created are also called.
  evt, a, b = eh:pullEvent()
end
 
-- We can unregister if we need to.
eh:unregister(myHandler)
--]]
 
local Events = {}
Events.__index = Events
 
function Events:register(event, handler)
  for k,v in pairs(self.callbacks) do
    if v[1] == event and v[2] == handler then
      return
    end
  end
  table.insert(self.callbacks, { event, handler })
end
 
-- Takes an event name or nil, and a callback or
-- nil.
function Events:unregister(a, b)
  local removeKeys = {}
  for k,v in pairs(self.callbacks) do
    if (a == nil or a == v[1])
      and (b == nil or b == v[2])
      then
      removeKeys[k] = true
    end
  end
  for k,v in pairs(removeKeys) do
    self.callbacks[k] = nil
  end
end
 
function Events:pullEvent(filter)
  while true do
    evt, p1, p2, p3, p4, p5 = os.pullEvent(filter)
    for k,v in pairs(self.callbacks) do
      if v[1] == evt then
        v[2](p1, p2, p3, p4, p5)
      end
    end
    if filter == nil or filter == evt then
      return evt, p1, p2, p3, p4, p5
    end
  end
end
 
-- Creates an instance of an event manager.
function create()
  em = {}
  setmetatable(em, Events)
  em.callbacks = {}
  return em
end
