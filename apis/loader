--[[
Utility for loading APIs using a path.

e.g.
  loader.loadAPI("events")
will load the core events API, 
  "/core/apis/events"
]]

--------------------------------------------------
-- @param string api The name of the API to load,
-- without path. We search /*/apis/ for the API
-- and load it.
-- @param bool force If true, we reload the API
-- rather than skipping it if loaded. This is
-- useful for testing an API while developing it,
-- but normally programs should omit this
-- parameter.
--------------------------------------------------
function loadAPI(api, force)
  if _G[api] then
    if force then
      _G[api] = nil
    else
      return false
    end
  end
  local fullname = locateAPI(api)
  if fullname then
    return os.loadAPI(fullname)
  end
  return false
end

--------------------------------------------------
-- @param string api The name of the API to load,
-- without path. We search /*/apis/ for the API
-- and return the path to it.
--------------------------------------------------
function locateAPI(api)
  local paths = fs.find("/*/apis")
  for k,path in pairs(paths) do
    local fullname = fs.combine(path, api)
    if fs.exists(fullname) then
      return fullname
    end
    fullname = fullname .. ".lua"
	if fs.exists(fullname) then
      return fullname
    end
  end
  return nil
end

--------------------------------------------------
-- Loads a fle and runs it immediately as an
-- anonymous function. None of the locals it
-- declares will persist after it has run.
--------------------------------------------------
function include(file)
  local h = fs.open(file, "r")
  if not h then
    print("Could not include file " .. file)
    return
  end
  loadstring(h.readAll())()
end
